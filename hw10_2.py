# .2 טיפול בשגיאות -
# a. הסבר מה עושה except-try?
# b. הסבר מדוע כדאי "לתפוס" את השג יאות בפייטון?
# c. כתוב קטע קוד המחלק את ה מספר 88 ב- אפס, ואז עטוף אותו ב - except try
# d. כתוב קטע קוד המבצע raise לשגיאה, ואז עטוף אותו ב- except try
# e. צור רשימה של מספרים באורך 4 והכנס לתוכה מספרים כלשהם
# כתוב לולאה הקולטת מהמשתמש מספר עד אשר המשתמש הכניס מינוס 999
# i. בכל פעם הדפס את איבר הרשימה באינ ד קס שהוכנס
# )לדוגמא אם המשתמש הכניס ,0 הדפס את האיבר באינד קס 0(
# ii. עטוף את הקוד ב except-try כך שאם המשתמש יכניס אות, או אינדקס שלא
# בטווח - אז התוכנית לא תכשל
#
# הוסף ל- except הדפסה המסבירה מה היתה הטעות )ראה קוד מהשיעור(


# a. הסבר מה עושה except-try?
# b. הסבר מדוע כדאי "לתפוס" את השגיאות בפייטון?

"הtry בודק את הקוד שמוזח תחתיו לשגיאה ובמידה וקרתה שגיאה except תופס אותה ומתריע עליה בפני המשתמש מונע מהתוכנית לקרוס ונותן למשתמש אפשרות לתקן. "


# c. כתוב קטע קוד המחלק את ה מספר 88 ב- אפס, ואז עטוף אותו ב - except try

x: int = 88
y: int = 0
try:
    print(f"{x}/{y} = {x/y}")
except ZeroDivisionError as e:
    print(e)

# d.

try:
    raise ZeroDivisionError ("test")
except ZeroDivisionError as e:
    print(e)


# e. צור רשימה של מספרים באורך 4 והכנס לתוכה מספרים כלשהם
# כתוב לולאה הקולטת מהמשתמש מספר עד אשר המשתמש הכניס מינוס 999
# i. בכל פעם הדפס את איבר הרשימה באינדקס שהוכנס
# )לדוגמא אם המשתמש הכניס ,0 הדפס את האיבר באינדקס 0(
# ii. עטוף את הקוד ב except-try כך שאם המשתמש יכניס אות, או אינדקס שלא
# בטווח - אז התוכנית לא תכשל
#
# הוסף ל- except הדפסה המסבירה מה היתה הטעות )ראה קוד מהשיעור(

list_4: list[int] =[3,8,-5,99]
SENTINEL = -999

while True:
    try:
        index: int = int(input("enter an index: "))
        if index == SENTINEL:
            break
        print(list_4[index])
    except ValueError as e:
        print(e)
    except IndexError as e:
        print(e)
